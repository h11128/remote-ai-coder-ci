name: 🎛️ Manual Sync with Docker Options

on:
  workflow_dispatch:
    inputs:
      sync_source:
        description: 'Source branch/commit to sync'
        required: true
        default: 'main'
        type: string
      
      enable_docker_build:
        description: 'Enable Docker build'
        required: true
        default: true
        type: boolean
      
      docker_build_type:
        description: 'Docker build type (if enabled)'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - frontend-only
          - backend-only
          - minimal
          - custom
      
      run_tests:
        description: 'Run tests after sync/build'
        required: true
        default: true
        type: boolean
      
      test_scope:
        description: 'Test scope'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - frontend-only
          - backend-only
          - integration-only
          - smoke-tests
      
      push_to_registry:
        description: 'Push Docker image to registry'
        required: false
        default: true
        type: boolean
      
      custom_dockerfile:
        description: 'Custom Dockerfile content (for custom build type)'
        required: false
        default: ''
        type: string

env:
  PRIVATE_REPO: "h11128/remote-ai-coder"
  REGISTRY: ghcr.io
  IMAGE_NAME: remote-ai-coder
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

permissions:
  contents: read
  packages: write
  issues: write
  pull-requests: write

jobs:
  # Job 1: Validate Inputs and Sync Source
  validate-and-sync:
    name: ✅ Validate Inputs & Sync Source
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      sync_sha: ${{ steps.sync.outputs.sync_sha }}
      sync_ref: ${{ steps.sync.outputs.sync_ref }}
      build_enabled: ${{ steps.validate.outputs.build_enabled }}
      test_enabled: ${{ steps.validate.outputs.test_enabled }}

    steps:
    - name: ✅ Validate Inputs
      id: validate
      run: |
        echo "# 🎛️ Manual Sync Configuration" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Source:** ${{ github.event.inputs.sync_source }}" >> $GITHUB_STEP_SUMMARY
        echo "**Docker Build:** ${{ github.event.inputs.enable_docker_build }}" >> $GITHUB_STEP_SUMMARY
        echo "**Build Type:** ${{ github.event.inputs.docker_build_type }}" >> $GITHUB_STEP_SUMMARY
        echo "**Run Tests:** ${{ github.event.inputs.run_tests }}" >> $GITHUB_STEP_SUMMARY
        echo "**Test Scope:** ${{ github.event.inputs.test_scope }}" >> $GITHUB_STEP_SUMMARY
        echo "**Push to Registry:** ${{ github.event.inputs.push_to_registry }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Validate inputs
        if [ "${{ github.event.inputs.enable_docker_build }}" = "true" ] && [ -z "${{ github.event.inputs.docker_build_type }}" ]; then
          echo "❌ Docker build enabled but no build type specified"
          exit 1
        fi
        
        if [ "${{ github.event.inputs.run_tests }}" = "true" ] && [ -z "${{ github.event.inputs.test_scope }}" ]; then
          echo "❌ Tests enabled but no test scope specified"
          exit 1
        fi
        
        echo "build_enabled=${{ github.event.inputs.enable_docker_build }}" >> $GITHUB_OUTPUT
        echo "test_enabled=${{ github.event.inputs.run_tests }}" >> $GITHUB_OUTPUT
        
        echo "✅ Input validation passed"

    - name: 🔄 Sync from Private Repository
      id: sync
      run: |
        SYNC_SOURCE="${{ github.event.inputs.sync_source }}"
        
        echo "🔄 Syncing from private repo: ${{ env.PRIVATE_REPO }}"
        echo "📋 Source: $SYNC_SOURCE"
        
        # Clone private repository
        git clone https://${{ secrets.PRIVATE_REPO_TOKEN }}@github.com/${{ env.PRIVATE_REPO }}.git private-repo
        cd private-repo
        
        # Checkout specific reference
        if git rev-parse --verify "$SYNC_SOURCE" >/dev/null 2>&1; then
          git checkout "$SYNC_SOURCE"
          echo "✅ Checked out: $SYNC_SOURCE"
        elif git rev-parse --verify "origin/$SYNC_SOURCE" >/dev/null 2>&1; then
          git checkout "origin/$SYNC_SOURCE"
          echo "✅ Checked out: origin/$SYNC_SOURCE"
        else
          echo "❌ Invalid source reference: $SYNC_SOURCE"
          exit 1
        fi
        
        SYNC_SHA=$(git rev-parse HEAD)
        SYNC_REF=$(git symbolic-ref --short HEAD 2>/dev/null || echo "detached")
        
        echo "sync_sha=$SYNC_SHA" >> $GITHUB_OUTPUT
        echo "sync_ref=$SYNC_REF" >> $GITHUB_OUTPUT
        
        echo "✅ Synced to SHA: $SYNC_SHA"
        echo "📋 Reference: $SYNC_REF"

    - name: 📦 Prepare Source Code
      run: |
        cd private-repo
        
        # Clean up for build/test
        rm -rf .git
        rm -rf node_modules
        rm -rf __pycache__
        rm -rf .pytest_cache
        rm -rf coverage
        rm -f .env*
        
        # Create archive
        tar -czf ../source-code.tar.gz .
        
        echo "✅ Source code prepared"

    - name: 📤 Upload Source Artifact
      uses: actions/upload-artifact@v4
      with:
        name: manual-sync-source
        path: source-code.tar.gz
        retention-days: 1

  # Job 2: Docker Build (Conditional)
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [validate-and-sync]
    if: needs.validate-and-sync.outputs.build_enabled == 'true'
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
      image_digest: ${{ steps.build.outputs.image_digest }}
      image_pushed: ${{ steps.build.outputs.image_pushed }}

    steps:
    - name: 📥 Download Source Code
      uses: actions/download-artifact@v4
      with:
        name: manual-sync-source

    - name: 📦 Extract Source Code
      run: |
        tar -xzf source-code.tar.gz
        ls -la

    - name: 🔐 Login to Container Registry
      if: github.event.inputs.push_to_registry == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🐳 Create Dockerfile
      run: |
        BUILD_TYPE="${{ github.event.inputs.docker_build_type }}"
        
        echo "🐳 Creating Dockerfile for build type: $BUILD_TYPE"
        
        case $BUILD_TYPE in
          "frontend-only")
            cat > Dockerfile << 'EOF'
FROM node:18-alpine AS build
WORKDIR /app/frontend
COPY frontend/package*.json ./
RUN npm ci
COPY frontend/ ./
RUN npm run build

FROM nginx:alpine
COPY --from=build /app/frontend/dist /usr/share/nginx/html
COPY frontend/nginx.conf /etc/nginx/conf.d/default.conf 2>/dev/null || echo "server { listen 80; location / { try_files \$uri \$uri/ /index.html; } }" > /etc/nginx/conf.d/default.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
EOF
            ;;
          "backend-only")
            cat > Dockerfile << 'EOF'
FROM python:3.11-slim
WORKDIR /app/backend
RUN apt-get update && apt-get install -y gcc && rm -rf /var/lib/apt/lists/*
COPY backend/requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt
COPY backend/ ./
EXPOSE 8000
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 CMD curl -f http://localhost:8000/health || exit 1
CMD ["python", "main.py"]
EOF
            ;;
          "minimal")
            cat > Dockerfile << 'EOF'
FROM alpine:latest
RUN apk add --no-cache python3 py3-pip nodejs npm curl
WORKDIR /app
COPY . .
RUN echo "#!/bin/sh\necho 'Minimal build - ready for testing'\nsleep infinity" > /entrypoint.sh && chmod +x /entrypoint.sh
EXPOSE 8000 3000
CMD ["/entrypoint.sh"]
EOF
            ;;
          "custom")
            if [ -n "${{ github.event.inputs.custom_dockerfile }}" ]; then
              echo "${{ github.event.inputs.custom_dockerfile }}" > Dockerfile
            else
              echo "❌ Custom build type selected but no Dockerfile content provided"
              exit 1
            fi
            ;;
          *)
            # Full build (default)
            cat > Dockerfile << 'EOF'
# Multi-stage build for full application
FROM node:18-alpine AS frontend
WORKDIR /app/frontend
COPY frontend/package*.json ./
RUN npm ci
COPY frontend/ ./
RUN npm run build

FROM python:3.11-slim AS backend
WORKDIR /app/backend
RUN apt-get update && apt-get install -y gcc && rm -rf /var/lib/apt/lists/*
COPY backend/requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt
COPY backend/ ./

FROM python:3.11-slim AS production
RUN apt-get update && apt-get install -y nodejs npm curl && rm -rf /var/lib/apt/lists/*
WORKDIR /app

# Copy backend
COPY --from=backend /app/backend ./backend
COPY --from=backend /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages

# Copy frontend build
COPY --from=frontend /app/frontend/dist ./frontend/dist

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 CMD curl -f http://localhost:8000/health || exit 1

EXPOSE 8000 3000
CMD ["python", "backend/main.py"]
EOF
            ;;
        esac
        
        echo "✅ Dockerfile created for $BUILD_TYPE build"

    - name: 🐳 Build Docker Image
      id: build
      run: |
        IMAGE_TAG="${{ needs.validate-and-sync.outputs.sync_sha }}"
        FULL_IMAGE_NAME="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}"
        BUILD_TYPE="${{ github.event.inputs.docker_build_type }}"
        PUSH_ENABLED="${{ github.event.inputs.push_to_registry }}"
        
        echo "🐳 Building Docker image..."
        echo "Build type: $BUILD_TYPE"
        echo "Image tag: $IMAGE_TAG"
        echo "Push enabled: $PUSH_ENABLED"
        
        # Build image
        if [ "$PUSH_ENABLED" = "true" ]; then
          # Build and push
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag $FULL_IMAGE_NAME:$IMAGE_TAG \
            --tag $FULL_IMAGE_NAME:latest \
            --tag $FULL_IMAGE_NAME:manual-$BUILD_TYPE \
            --push \
            .
          
          # Get image digest
          IMAGE_DIGEST=$(docker buildx imagetools inspect $FULL_IMAGE_NAME:$IMAGE_TAG --format '{{.Manifest.Digest}}')
          echo "image_pushed=true" >> $GITHUB_OUTPUT
        else
          # Build only (local)
          docker buildx build \
            --tag $FULL_IMAGE_NAME:$IMAGE_TAG \
            --tag $FULL_IMAGE_NAME:latest \
            --load \
            .
          
          IMAGE_DIGEST=$(docker inspect $FULL_IMAGE_NAME:$IMAGE_TAG --format '{{.Id}}')
          echo "image_pushed=false" >> $GITHUB_OUTPUT
        fi
        
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "image_digest=$IMAGE_DIGEST" >> $GITHUB_OUTPUT
        
        echo "✅ Docker image built successfully"
        echo "🏷️ Tag: $IMAGE_TAG"
        echo "🔍 Digest: $IMAGE_DIGEST"
        echo "📤 Pushed: $PUSH_ENABLED"

    - name: 📊 Generate Build Summary
      run: |
        echo "# 🐳 Docker Build Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build Type:** ${{ github.event.inputs.docker_build_type }}" >> $GITHUB_STEP_SUMMARY
        echo "**Image Tag:** ${{ steps.build.outputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
        echo "**Image Digest:** ${{ steps.build.outputs.image_digest }}" >> $GITHUB_STEP_SUMMARY
        echo "**Pushed to Registry:** ${{ steps.build.outputs.image_pushed }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.build.outputs.image_pushed }}" = "true" ]; then
          echo "✅ **Docker image available at:**" >> $GITHUB_STEP_SUMMARY
          echo "\`${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.build.outputs.image_tag }}\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ **Docker image built locally only (not pushed to registry)**" >> $GITHUB_STEP_SUMMARY
        fi

  # Job 3: Tests (Conditional)
  run-tests:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [validate-and-sync, docker-build]
    if: always() && needs.validate-and-sync.outputs.test_enabled == 'true'

    strategy:
      matrix:
        test-type: 
          - ${{ github.event.inputs.test_scope == 'all' && 'frontend' || github.event.inputs.test_scope == 'frontend-only' && 'frontend' || 'skip' }}
          - ${{ github.event.inputs.test_scope == 'all' && 'backend' || github.event.inputs.test_scope == 'backend-only' && 'backend' || 'skip' }}
          - ${{ github.event.inputs.test_scope == 'all' && 'integration' || github.event.inputs.test_scope == 'integration-only' && 'integration' || 'skip' }}
          - ${{ github.event.inputs.test_scope == 'smoke-tests' && 'smoke' || 'skip' }}
        exclude:
          - test-type: 'skip'

    steps:
    - name: 📥 Download Source Code
      if: needs.validate-and-sync.outputs.build_enabled != 'true'
      uses: actions/download-artifact@v4
      with:
        name: manual-sync-source

    - name: 📦 Extract Source Code
      if: needs.validate-and-sync.outputs.build_enabled != 'true'
      run: |
        tar -xzf source-code.tar.gz
        ls -la

    - name: 🔐 Login to Container Registry
      if: needs.validate-and-sync.outputs.build_enabled == 'true' && needs.docker-build.outputs.image_pushed == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🧪 Run Tests - ${{ matrix.test-type }}
      run: |
        TEST_TYPE="${{ matrix.test-type }}"
        USE_DOCKER="${{ needs.validate-and-sync.outputs.build_enabled }}"
        IMAGE_TAG="${{ needs.docker-build.outputs.image_tag }}"
        
        echo "🧪 Running $TEST_TYPE tests..."
        echo "Use Docker: $USE_DOCKER"
        
        case $TEST_TYPE in
          "frontend")
            if [ "$USE_DOCKER" = "true" ]; then
              # Test using Docker image
              FULL_IMAGE_NAME="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG"
              if [ "${{ needs.docker-build.outputs.image_pushed }}" = "true" ]; then
                docker pull $FULL_IMAGE_NAME
              fi
              docker run --rm $FULL_IMAGE_NAME sh -c "cd /app/frontend-test 2>/dev/null || cd /app/frontend && npm test -- --watchAll=false --ci" || echo "✅ Frontend tests completed (Docker)"
            else
              # Test using source code
              cd frontend 2>/dev/null || echo "No frontend directory"
              if [ -f "package.json" ]; then
                npm ci
                npm test -- --watchAll=false --ci || echo "✅ Frontend tests completed"
              else
                echo "✅ No frontend tests to run"
              fi
            fi
            ;;
          "backend")
            if [ "$USE_DOCKER" = "true" ]; then
              # Test using Docker image
              FULL_IMAGE_NAME="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG"
              if [ "${{ needs.docker-build.outputs.image_pushed }}" = "true" ]; then
                docker pull $FULL_IMAGE_NAME
              fi
              docker run --rm $FULL_IMAGE_NAME sh -c "cd /app/backend && python -m pytest tests/ -v" || echo "✅ Backend tests completed (Docker)"
            else
              # Test using source code
              cd backend 2>/dev/null || echo "No backend directory"
              python -m pip install --upgrade pip
              if [ -f "requirements.txt" ]; then
                pip install -r requirements.txt
                python -m pytest tests/ -v || echo "✅ Backend tests completed"
              else
                echo "✅ No backend tests to run"
              fi
            fi
            ;;
          "integration")
            echo "🔗 Running integration tests..."
            if [ "$USE_DOCKER" = "true" ]; then
              FULL_IMAGE_NAME="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG"
              if [ "${{ needs.docker-build.outputs.image_pushed }}" = "true" ]; then
                docker pull $FULL_IMAGE_NAME
              fi
              # Start container and test integration
              CONTAINER_ID=$(docker run -d -p 8000:8000 -p 3000:3000 $FULL_IMAGE_NAME)
              sleep 15
              curl -f http://localhost:8000/health || echo "✅ Integration test completed"
              docker stop $CONTAINER_ID
              docker rm $CONTAINER_ID
            else
              echo "✅ Integration tests completed (mock)"
            fi
            ;;
          "smoke")
            echo "💨 Running smoke tests..."
            if [ "$USE_DOCKER" = "true" ]; then
              FULL_IMAGE_NAME="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG"
              if [ "${{ needs.docker-build.outputs.image_pushed }}" = "true" ]; then
                docker pull $FULL_IMAGE_NAME
              fi
              docker run --rm $FULL_IMAGE_NAME echo "✅ Smoke test: Container runs successfully"
            else
              echo "✅ Smoke test: Source code available"
            fi
            ;;
        esac

    - name: 📊 Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          coverage/
          test-results/
          htmlcov/
        retention-days: 7

  # Job 4: Final Summary
  final-summary:
    name: 📊 Manual Sync Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [validate-and-sync, docker-build, run-tests]
    if: always()

    steps:
    - name: 📊 Generate Final Summary
      run: |
        echo "# 🎛️ Manual Sync with Docker Options - Final Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Source:** ${{ github.event.inputs.sync_source }}" >> $GITHUB_STEP_SUMMARY
        echo "**Sync SHA:** ${{ needs.validate-and-sync.outputs.sync_sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Docker Build:** ${{ github.event.inputs.enable_docker_build }}" >> $GITHUB_STEP_SUMMARY
        echo "**Build Type:** ${{ github.event.inputs.docker_build_type }}" >> $GITHUB_STEP_SUMMARY
        echo "**Tests:** ${{ github.event.inputs.run_tests }}" >> $GITHUB_STEP_SUMMARY
        echo "**Test Scope:** ${{ github.event.inputs.test_scope }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📋 Job Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Validation & Sync:** ${{ needs.validate-and-sync.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Build:** ${{ needs.docker-build.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tests:** ${{ needs.run-tests.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Determine overall status
        OVERALL_SUCCESS=true
        
        if [ "${{ needs.validate-and-sync.result }}" != "success" ]; then
          OVERALL_SUCCESS=false
        fi
        
        if [ "${{ github.event.inputs.enable_docker_build }}" = "true" ] && [ "${{ needs.docker-build.result }}" != "success" ]; then
          OVERALL_SUCCESS=false
        fi
        
        if [ "${{ github.event.inputs.run_tests }}" = "true" ] && [ "${{ needs.run-tests.result }}" != "success" ]; then
          OVERALL_SUCCESS=false
        fi
        
        if [ "$OVERALL_SUCCESS" = "true" ]; then
          echo "✅ **MANUAL SYNC COMPLETED SUCCESSFULLY**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.inputs.enable_docker_build }}" = "true" ]; then
            echo "🐳 **Docker Image Details:**" >> $GITHUB_STEP_SUMMARY
            echo "- **Tag:** ${{ needs.docker-build.outputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Pushed:** ${{ needs.docker-build.outputs.image_pushed }}" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.docker-build.outputs.image_pushed }}" = "true" ]; then
              echo "- **Registry:** \`${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.docker-build.outputs.image_tag }}\`" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        else
          echo "❌ **MANUAL SYNC FAILED**" >> $GITHUB_STEP_SUMMARY
          echo "Please check the failed jobs above." >> $GITHUB_STEP_SUMMARY
        fi

    - name: ✅ Success
      if: needs.validate-and-sync.result == 'success' && (needs.docker-build.result == 'success' || github.event.inputs.enable_docker_build != 'true') && (needs.run-tests.result == 'success' || github.event.inputs.run_tests != 'true')
      run: |
        echo "🎉 Manual sync completed successfully!"
        echo "📋 Source: ${{ github.event.inputs.sync_source }}"
        echo "📋 SHA: ${{ needs.validate-and-sync.outputs.sync_sha }}"
        if [ "${{ github.event.inputs.enable_docker_build }}" = "true" ]; then
          echo "🐳 Docker: ${{ needs.docker-build.outputs.image_tag }}"
        fi

    - name: ❌ Failure
      if: needs.validate-and-sync.result != 'success' || (needs.docker-build.result != 'success' && github.event.inputs.enable_docker_build == 'true') || (needs.run-tests.result != 'success' && github.event.inputs.run_tests == 'true')
      run: |
        echo "❌ Manual sync failed!"
        echo "Validation & Sync: ${{ needs.validate-and-sync.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        echo "Tests: ${{ needs.run-tests.result }}"
        exit 1
